From d03216321684099439ef7eded22246d5a21d73d6 Mon Sep 17 00:00:00 2001
From: Yuta Saito <kateinoigakukun@gmail.com>
Date: Mon, 29 Jan 2024 09:49:15 +0000
Subject: [PATCH] wasm: align fiber stack pointer to 16 bytes

In WebAssembly C ABI, the linear stack pointer must be always aligned
to 16 bytes like other archs.
The misaligned stack pointer causes some weird memory corruption since
compiler assumes the aligned stack pointer.
---
 coroutine/asyncify/Context.h | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/coroutine/asyncify/Context.h b/coroutine/asyncify/Context.h
index 7dba829a1d..71791a4004 100644
--- a/coroutine/asyncify/Context.h
+++ b/coroutine/asyncify/Context.h
@@ -13,6 +13,7 @@
 
 #include <stddef.h>
 #include <stdio.h>
+#include <stdint.h>
 #include "wasm/asyncify.h"
 #include "wasm/machine.h"
 #include "wasm/fiber.h"
@@ -47,10 +48,13 @@ static inline void coroutine_initialize_main(struct coroutine_context * context)
 
 static inline void coroutine_initialize(struct coroutine_context *context, coroutine_start start, void *stack, size_t size)
 {
-    if (ASYNCIFY_CORO_DEBUG) fprintf(stderr, "[%s] entry (context = %p, stack = %p ... %p)\n", __func__, context, stack, (char *)stack + size);
+    // Linear stack pointer must be always aligned down to 16 bytes.
+    // https://github.com/WebAssembly/tool-conventions/blob/c74267a5897c1bdc9aa60adeaf41816387d3cd12/BasicCABI.md#the-linear-stack
+    uintptr_t sp = ((uintptr_t)stack + size) & ~0xF;
+    if (ASYNCIFY_CORO_DEBUG) fprintf(stderr, "[%s] entry (context = %p, stack = %p ... %p)\n", __func__, context, stack, (char *)sp);
     rb_wasm_init_context(&context->fc, coroutine_trampoline, start, context);
     // record the initial stack pointer position to restore it after resumption
-    context->current_sp = (char *)stack + size;
+    context->current_sp = (char *)sp;
     context->stack_base = stack;
     context->size = size;
 }
-- 
2.43.0

